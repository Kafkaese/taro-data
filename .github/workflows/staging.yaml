name: Staging

on: 
  workflow_dispatch:
    inputs: 
      distinct_id:
        description: 'Input id from triggering workflow'
        required: false
        default: ''
        type: string
      POSTGRES_HOST:
        description: 'postggres server host'
        required: false
        default: ''
        type: string

permissions:
  id-token: write
  contents: read

concurrency: staging

env: 
  ENV: staging

jobs:
    pipeline:
        name: 'Build and run pipeline container'
        runs-on: ubuntu-latest
        environment: staging
        env:
          SECRET: ${{ secrets.PGP_PASSPHRASE }}
          POSTGRES_USER: ${{ secrets.TF_VAR_PG_PASSWORD }}
          POSTGRES_PASSWORD: ${{ secrets.TF_VAR_PG_PASSWORD }}
          POSTGRES_PORT: 5432
          POSTGRES_DB: 'taro-db'
          
        steps:
          - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
            run: echo ${{ github.event.inputs.distinct_id }}
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v1
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to DockerHub
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
          - name: Build and push
            uses: docker/build-push-action@v2
            with:
              file: ./pipeline.Dockerfile
              push: true
              tags: kafkaese/taro:pipeline
          - name: Check out the repo
            uses: actions/checkout@v2
          - name: 'Decrypt postgres server'
            run: |
              pg_host_decrypted=$(echo -n "${{ github.event.inputs.POSTGRES_HOST }}" | base64 -d | gpg --decrypt --batch --passphrase "$SECRET" --output -)
              echo "POSTGRES_HOST=$pg_host_decrypted" >> "$GITHUB_ENV"
              cat $GITHUB_ENV
              echo "${{ env.POSTGRES_HOST }}"
          - name: Debug
            run: |
              echo $POSTGRES_HOST
              echo $POSTGRES_USER
              echo $POSTGRES_PASSWORD
              echo $POSTGRES_DB
          - name: Run the container
            run: docker run --rm -e POSTGRES_HOST=$POSTGRES_HOST -e POSTGRES_DB=$POSTGRES_DB -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e ENV=test kafkaese/taro:pipeline

    build-api:
        name: 'Build and push api container'
        runs-on: ubuntu-latest
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ACR_LOGIN: ${{ github.event.client_payload.acr-login }}
            ACR_TAG: ${{ github.event.client_payload.acr-login }}/taro:api

        steps:
            - name: Login to Azure with service principal
              uses: azure/login@v1.4.3
              with:
                creds: ${{ secrets.AZURE_SP_CREDENTIALS }}
            - name: 'Loggin to Azure Container Registry'
              run: az acr login --name tarostagingregistry.azurecr.io
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                file: ./api.Dockerfile
                push: true
                tags: 'tarostagingregistry.azurecr.io/taro:api'

  
    deploy-api:
        name: 'Deploy API'
        runs-on: ubuntu-latest
        needs: [build-api]
        environment: staging
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ACR_TAG: ${{ github.event.client_payload.acr-login }}/taro:api

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: 'Terraform Setup'
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
            - name: 'Initialize Terraform'
              working-directory: ./terraform/deploy
              run: terraform init
            - name: 'Make plan'
              working-directory: ./terraform/deploy
              run: terraform plan -var "postgres_prefix=staging-postgres-server" -var "instance_name=staging-frontend" -var "environment=staging" -var "resource_group_name=taro-staging" -var "acr_name=tarostagingregistry" -var "image_registry_credential_user=$ARM_CLIENT_ID" -var "image_registry_credential_password=$ARM_CLIENT_SECRET" -out 'deploy.tfplan'
            - name: 'Apply plan'
              working-directory: ./terraform/deploy
              run: terraform apply deploy.tfplan
